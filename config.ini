# The following provides all the different possible variables a configuration file may contain.
# Based on the the `node_type` parameter and the other set configs, a "unique" AnyLog node will be deployed.
# A parameters that has a hash symbol (#) in front of it means that the parameter is not required
# The file can be run using the AnyLog-API interface.


[general]
# AnyLog version to download from Docker Hub
#   develop - code that has been tested and used for a while
#       alpine version: alpine
#       arm64 version: develop-arm64 | alpine-arm64
#   predevelop - code currently being tested
#       alpine version: predevelop-alpine
#       arm64 version: predevelop-arm64 | predevelop-alpine-arm64
build = <build_type>

# Type of node AnyLog should run - users can specify more than one node type in a single instance with comma separating them
#   none - an AnyLog instance with nothing on it
#   rest - an AnyLog instance that configures only TCP, REST, broker and authentication information
#   master - a "notary" system between other nodes in the network via either a public or private blockchain
#   operator - nodes containing generated by sensors. these can be either physical devices (ex. cars) or remote cloud
#   publisher - nodes that simply generate data and send them to operator nodes
#   query - nodes dedicated to query and BI activity. Note: all nodes can query data, as such a user isn't required
#           to have a query node
#   single-node - A node which acts as both master and operator node
#   single-node-publisher - A node which acts as both master and publisher node
node_type = <node_type>

# Name correlated with the node. This will also be used as the container name if deploying AnyLog within AnyLog-API
node_name = <node_name>

# The name of the company correlated with policies declared via this node
company_name = <company_name>

# Machine location - If user doesn't declare --disable-location & location isn't set, then AnyLog-API has a process to find the location of the machine
# Note, coordinates location is accessible via Grafana Map visualization
#location = <location>

[authentication]
# whether or not to enable authentication against REST request
authentication = false

# authentication username and password
#username = <auth_user>
#password = <auth_pass>

# authentication type
#   admin
#   user
#auth_type = <auth_type>

[networking]
# An option to change the external & local IP if different than what the machine is configured to. This option is most often
# used for 2 key cases
#   1) When a machine is connected to more than one network, and the system should use a specific one, rather than
#      taking the default IP(s)
#   2) When the machine seats behind a fire wall, and wants both the external (and local) IP to be the same
#external_ip = <external_ip>
#local_ip = <local_ip>

# TCP connection information for master node
master_node = <master_node>

# TCP port for node used to communicate with other nodes in the network. Please make sure the port is open and available
anylog_server_port = <anylog_server_port>

# REST port for node used to communicate with other nodes in the network. Please make sure the port is open and available
anylog_rest_port = <anylog_rest_port>

# AnyLog Broker Port
#anylog_broker_port = <broker_port>


[database]
# Type of database to be used by the AnyLog node
#    PSQL
#    SQLite
db_type = sqlite

# Database access port
db_port = 5432

# Database credentials -- ${db_user}@{db_ip}:${db_user_password}
db_user = <db_user_credentials>

# Logical database name for operator node
#default_dbms = <logical_db_name>


[cluster] # used by operator only
# Whether or not to enable cluster
enable_cluster = false

# Name of the cluster (for operator node)
cluster_name = <cluster_name>

[partition] # operator only
# whether or not to partition the data stored.
enable_partition = false

# timestamp column to partition against
#partition_column = <partition_column>

# Interval to partition against (ex. 7 days)
#   hour
#   day
#   month
#partition_interval = <partition_interval>

# whether or not to drop partitions
drop_partition = false

# how many days of data to keep.
#partition_keep = <partition_keep>


[data_monitor] # operator only
# Whether or not to monitor data
enable_data_monitor = false

# which table(s) to monitor - when set to "*" monitor all
#table_name = <table_names>

# The number of intervals to keep.
#interval_value = <interval_value>

# The length of the interval expressed in one of the following: seconds, minutes, hours, days.
#data_monitor_interval = <monitoring_interval>

[mqtt] # nodes of type operator || publisher only
# whether or not to enable MQTT
mqtt_enable = false

# MQTT Broker - required if enabled
# for a REST based MQTT use `local` for broker
#broker = <mqtt_broker>

# MQTT port - required if enabled
mqtt_port = <mqtt_port>

# MQTT username
#mqtt_user = <mqtt_user>

# MQTT password
#mqtt_password = test

# Whether or not to enable MQTT logging
mqtt_log = false

# MQTT topic name - required if enablled
# if set to "#" will accept all topic
#mqtt_topic_name = <mqtt_topic_name>

# Database name to use for content
#mqtt_topic_dbms = bring [dbms]

# Table name to use for content
#mqtt_topic_table = <mqtt_topic_table>

# The timestamp to use for content, can use `now` for local timestamp
#mqtt_column_timestamp = <mqtt_topic_timestamp>

# MQTT 'value' column type support. Options:
#   int
#   bool
#   str
#   timestmap
#mqtt_column_value_type=<mqtt_column_value_type>

# mqtt topic for value columns
#mqtt_column_value=<mqtt_column_value>

