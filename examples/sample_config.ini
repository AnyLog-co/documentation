[general]
# Type of node AnyLog should run
#   master - a "notary" system between other nodes in the network via either a public or private blockchain
#   operator - nodes containing generated by sensors. these can be either physical devices (ex. cars) or remote cloud
#   publisher - nodes that simply generate data and send them to operator nodes
#   query - nodes dedicated to query and BI activity
node_type=<node_type>

# When setting up a node, declare the name of the node.
node_name=<node_name>

# The name of the company correlated with the node
company_name=<company_name>

# whether to set autentication (true/false) - if not set the default is false
set_authentication=<set_authentication>
#authentication_user_info=<authentication_user_info>

# ID of operator node - should only be set if you are redeploying the same operator node from scratch, but it still exists on blockchain
#member_id=<member_id>

# Machine location - coordinates location is accessible via Grafana Map visualization (ex. "0.0, 0.0")
#location=<location>

[networking]
# TCP IP and port information for master node (ex. 127.0.0.1:2048)
master_node=<master_node>

# TCP port for the specific node
anylog_tcp_port=<anylog_tcp_port>

# REST port for the specifi
anylog_rest_port=<anylog_rest_port>

# Enable local broker
#local_broker=<local_broker>

# AnyLog Broker Port
#anylog_broker_port=<anylog_broker_port>

[cluster]
# set operator as part of a cluster (True) or not (False)
#enable_cluster=<enable_cluster>

# ID of cluster (should already exist) that user wants to connect to
#cluster_id=<cluster_id>

# Name of the cluster
#cluster_name=<cluster_name>

# list of tables correlated to the logical database (default_dbms) stored within the cluster
#table=<table>

[database]
# Logical database name within operator node
#default_dbms=<db_name>

# Type of database to be used by the AnyLog node
#    PSQL
#    SQLite
db_type=<db_type>

# Database credentials -- ${db_user}@{db_ip}:${db_user_password}
db_user=<db_user>

# Database access port
db_port=<db_port>

[partition]
#enable_partition=<enable_partition>
#partition_column=<timestamp_column>
#partition_interval=<partition_interval>

[file]
# AnyLog file to execute
#execute_file=<execute_file> # boolean
#anylog_file=<anylog_file> # path of file to execute

[mqtt]
# Run an MQTT client as part of the node (Publisher & Operator only)
# URL: https://github.com/AnyLog-co/documentation/blob/master/mqtt.md
#mqtt_enable=<mqtt_enable>

# From  MQTT pull raw data that's not within topic
#mqtt_enable_other=<mqtt_enable_other>

# Connection info for broker
#mqtt_conn_info=<mqtt_conn_info>

# Port for MQTT
#mqtt_broker_port=<mqtt_broker_port>

# Broker log message
#mqtt_log=<mqtt_log>

# mqtt topic name to get data from
#mqtt_topic_name=<mqtt_topic_name>

# mqtt topic for database
#mqtt_topic_dbms=<mqtt_topic_dbms>

# mqtt topic for table
#mqtt_topic_table=<mqtt_topic_table>

# mqtt topic for timestamp column
#mqtt_column_timestamp=<mqtt_column_timestamp>

# MQTT 'value' column type support. Options:
#   int
#   bool
#   str
#   timestmap
#mqtt_column_value_type=<mqtt_column_value_type>


# mqtt topic for value columns
#mqtt_column_value=<mqtt_column_value>

# MQTT columns othen than 'value' and 'timestamp' - note by add and "and" between each bring column users can set additional column values
# Sample call: "and column.measurement.str='bring [measurement]' and ..."
#mqtt_extra_column=<mqtt_extra_column>

