import argparse
import blockchain_rest as blockchain

POLICY_IDS = [
    '56a51289381b0522924c332874662e19',
    '4a6c214567f5ec8de26812c6d4ce789a',
    'ca03fd3b4d86dfb7e02ebd50ab9346a3',
    '37a88c46c893186771bfa491ca1a8ff5',
    'fc83947f25985d1602f793969c35e22b',
    'e2e6be5e32dcf841cc9843cae2b263da',
    '3d80157732ffaf7e0af21bd278f3c499',
    'ee0917a3f3905078fd067840be4d6203',
    'd881e63544dd47b762ffa7d646572e20',
    'f07cdb8a768ff8fea2cf4614ed0eeeaf',
    'bc0a64888602369876ef12e9673106f9',
    '886c462a0cec361e3f8aec094ba1a35e',
    'b6ac22a89865871b3aa63bdb0fa5f5bb',
    '8d94dbf32da71ad5c7386287c3280198',
    '91525368da2f66ab52956ea7078e5613',
    'd3909dec892af132fbe4c69c5ed0bb77',
    '97ac750a8bcd175cdc1bc862df834bd9',
]

def main():
    """
    The following is an example of removing a policy from the AnyLog blockchain based on the ID address. To simplify
    the process the code uses the policy ID correlated to the policies generated by  blockchain_add_policy_complex.py
    and blockchain_add_policy_simple.py. The reason this works, is because the policy ID (UUID type) is based on the
    content in the policy - since the policy(s) are consistent the UUIDs would be consistent no matter the machine.

    Simplified - there cannot be 2 identical policies, thus each policy would have a unique id based on the content
    within it.
    :positional arguments:
        rest_conn             REST connection information
        master_node           TCP master information
    :optional arguments:
        -h, --help            show this help message and exit
        -a AUTH, --auth         AUTH      REST authentication information (default: None)
        -t TIMEOUT, --timeout   TIMEOUT   REST timeout period (default: 30)
    :params:

    """
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('rest_conn',       type=str,   default='127.0.0.1:2049', help='REST connection information')
    parser.add_argument('master_node',     type=str,   default='127.0.0.1:2048', help='TCP master information')
    parser.add_argument('-a', '--auth',    type=tuple, default=None, help='REST authentication information')
    parser.add_argument('-t', '--timeout', type=int,   default=30,   help='REST timeout period')
    args = parser.parse_args()

    # connect to AnyLog
    auth = ()
    if args.auth is not None: 
        auth = tuple(args.auth.split(','))

    for policy_id in POLICY_IDS:
        policy = blockchain.blockchain_get_by_id(conn=args.rest_conn, policy_id=policy_id, auth=auth,
                                                 timeout=args.timeout)
        if policy != {}:
            if not blockchain.drop_policy(conn=args.rest_conn, master_node=args.master_node, policy=policy, auth=auth,
                                          timeout=args.timeout):
                print('Failed to drop policy with ID %s' % policy_id)


if __name__ == '__main__':
    main()
    
