# --- Directories ---
# AnyLog Root Path
ANYLOG_PATH=/app
# AnyLog Library Path
ANYLOG_LIB=/app/AnyLog-Network
# AnyLog Home Path
ANYLOG_HOME_PATH=/app/AnyLog-Network
# !id_dir: ${ANYLOG_HOME}/anylog
ANYLOG_ID_DIR=/app/AnyLog-Network/anylog
# !blockchain_dir: ${ANYLOG_HOME}/blockchain
BLOCKCHAIN_DIR=/app/AnyLog-Network/blockchain
# !data_dir: ${ANYLOG_HOME}/data
DATA_DIR=/app/AnyLog-Network/data
# !local_scripts: ${ANYLOG_HOME}/deployment-scripts/scripts
LOCAL_SCRIPTS=/app/deployment-scripts/scripts
# !test_dir: ${ANYLOG_HOME}/deployment-scripts/test
TEST_DIR=/app/deployment-scripts/test

# --- General ---
# AnyLog License Key
#LICENSE_KEY=<GENERAL_LICENSE_KEY>
# Information regarding which AnyLog node configurations to enable. By default, even if everything is disabled, AnyLog starts TCP and REST connection protocols
NODE_TYPE=rest
# Name of the AnyLog instance
NODE_NAME=anylog-node
# Owner of the AnyLog instance
COMPANY_NAME=New Company
# Coordinates of the machine - used by Grafana to map the network
#LOCATION=<GENERAL_LOCATION>
# Country where machine is located
#COUNTRY=<GENERAL_COUNTRY>
# State where machine is located
#STATE=<GENERAL_STATE>
# City where machine is located
#CITY=<GENERAL_CITY>

# --- Authentication ---
# When using AnyLog authentication, nodes should have authentcation enabled once declared as a member on the blockchain
ENABLE_AUTH=false
# Whether or not to enable authentication when accessing node via REST
ENABLE_REST_AUTH=false
# Provide a password to protect sensitive information that is kept on the node
#NODE_PASSWORD=<AUTHENTICATION_NODE_PASSWORD>
# user that can connect to this node
#USER_NAME=<AUTHENTICATION_USER_NAME>
# Password associated with the user
#USER_PASSWORD=<AUTHENTICATION_USER_PASSWORD>
# The type of user
USER_TYPE=admin
# Password used by the ROOT member in authentication
#ROOT_PASSWORD=<AUTHENTICATION_ROOT_PASSWORD>

# --- Networking ---
# By default, a node will connect to the (TCP, REST and Message Broker - if declared) based on its associated policy.
#
# If a user disables policy-based option (`POLICY_BASED_NETWORKING=false`) then network connectivity is based on information
# in the configuration file.
#
# For policy-based configuration networking will be set as follows:
#   1. A user is able to decide whether the TCP connectivity is set to bind or not. If bind is enabled - then AnyLog
#       will use either the local or overlay IP address.
#        * If an overlay is declared, then the overlay IP address will replace the local IP address
#        * If binding is enabled, then AnyLog will only utilize the local or overlay IP address. Whereas if
#          binding is disabled, the blockchain will use both the external and local (or overlay) IP addresses of the
#          physical machine.
#
#    2. For REST and Message Broker, the (default) binding value is False. This is because data and/or GET requests
#       coming-in may come from machines/devices outside the network.#
#
#    3. Regarding the relation between blockchain policy and AnyLog networking - AnyLog only cares about policy keys `ip`,
#       `local_ip` and port values. All other networking information, such as `proxy_ip` and `external_ip` (if binding is
#       True), are more of an FYI regarding the network configurations of the actual machine.

# Connect to TCP, REST and Message Broker (if configured) based on correlating node policy
POLICY_BASED_NETWORKING=false
# Declare Policy name
#CONFIG_POLICY_NAME=<NETWORKING_CONFIG_POLICY_NAME>
# External IP address of the machine
#EXTERNAL_IP=<NETWORKING_EXTERNAL_IP>
# Local network IP address of the machine
#LOCAL_IP=<NETWORKING_LOCAL_IP>
# Overlay IP address - if set, will replace local IP address when connecting to network
#OVERLAY_IP=<NETWORKING_OVERLAY_IP>
# Configurable (local) IP address that can be used when behind a proxy, or using Kubernetes for static IP
#PROXY_IP=<NETWORKING_PROXY_IP>
# Port address used by AnyLog's TCP protocol to communicate with other nodes in the network
ANYLOG_SERVER_PORT=32548
# Port address used by AnyLog's REST protocol
ANYLOG_REST_PORT=32549
# Port value to be used as an MQTT broker, or some other third-party broker
#ANYLOG_BROKER_PORT=<NETWORKING_ANYLOG_BROKER_PORT>
# A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
TCP_BIND=true
# The number of concurrent threads supporting HTTP requests.	
TCP_THREADS=6
# A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
REST_BIND=false
# Timeout in seconds to determine a time interval such that if no response is being returned during the time interval, the system returns timeout error.
REST_TIMEOUT=20
# The number of concurrent threads supporting HTTP requests.	
REST_THREADS=6
# Boolean value to determine if messages are send over HTTPS with client certificates.
REST_SSL=False
# A bool value that determines if to bind to a specific IP and Port (a false value binds to all IPs)
BROKER_BIND=false
# The number of concurrent threads supporting broker requests.	
BROKER_THREADS=6

# --- Database ---
# Physical database type
DB_TYPE=sqlite
# Username for SQL database connection
#DB_USER=<DATABASE_DB_USER>
# Password correlated to database user
#DB_PASSWD=<DATABASE_DB_PASSWD>
# Database IP address
DB_IP=127.0.0.1
# Database port number
DB_PORT=5432
# Whether to set autocommit data
AUTOCOMMIT=false
# Whether to start to start system_query logical database
SYSTEM_QUERY=false
# Run system_query using in-memory SQLite. If set to false, will use pre-set database type
MEMORY=true
# Whether to enable NoSQL logical database
NOSQL_ENABLE=false
# Physical database type
NOSQL_TYPE=mongo
# Username for SQL database connection
#NOSQL_USER=<DATABASE_NOSQL_USER>
# Password correlated to database user
#NOSQL_PASSWD=<DATABASE_NOSQL_PASSWD>
# Database IP address
NOSQL_IP=127.0.0.1
# Database port number
NOSQL_PORT=27017
# Store blobs in database
NOSQL_BLOBS_DBMS=true
# Store blobs in folder
NOSQL_BLOBS_FOLDER=true
# Compress stored blobs
NOSQL_BLOBS_COMPRESS=false
# Whether (re)store a blob if already exists
NOSQL_BLOBS_REUSE=true

# --- Blockchain ---
# TCP connection information for Master Node
LEDGER_CONN=127.0.0.1:32548
# How often to sync from blockchain
SYNC_TIME=30 second
# Source of where the data is coming from
BLOCKCHAIN_SOURCE=master
# Where will the copy of the blockchain be stored
BLOCKCHAIN_DESTINATION=file

# --- Operator ---
# Operator ID
#MEMBER=<OPERATOR_MEMBER>
# Owner of the cluster
CLUSTER_NAME=new-company-cluster
# Logical database name
DEFAULT_DBMS=test
# Whether of not to enable HA against the cluster
ENABLE_HA=false
# How many days back to sync between nodes
START_DATE=-30d
# Whether to enable partitioning
ENABLE_PARTITIONS=false
# Which tables to partition
TABLE_NAME=*
# Which timestamp column to partition by
PARTITION_COLUMN=insert_timestamp
# Time period to partition by
PARTITION_INTERVAL=14 days
# How many partitions to keep
PARTITION_KEEP=6
# How often to check if an old partition should be removed
PARTITION_SYNC=1 day
# Whether to create a new table in the operator
CREATE_TABLE=true
# Record data inserted on Operator
UPDAE_TSD_INFO=true
# Archive data coming in
ARCHIVE=true
# Compress JSON and SQL file(s) backup
COMPRESS_FILE=true
# How many threads to use in the operator process
OPERATOR_THREADS=1

# --- Publisher ---
# Location of logical database name within file name
DBMS_FILE_LOCATION=0
# Location of table name within file name
TABLE_FILE_LOCATION=1
# Compress JSON and SQL file(s) backup
PUBLISHER_COMPRESS_FILE=true

# --- MQTT ---
# Whether to enable the default MQTT process
ENABLE_MQTT=true
# Whether to enable MQTT logging process
MQTT_LOG=false
# IP address of MQTT broker
MQTT_BROKER=driver.cloudmqtt.com
# Port associated with MQTT broker
MQTT_PORT=18785
# User associated with MQTT broker
MQTT_USER=ibglowct
# Password associated with MQTT user
MQTT_PASSWD=MSY4e009J7ts
# Topic to get data for
MQTT_TOPIC=anylogedgex
# Logical database name
MQTT_DBMS=test
# Table where to store data
MQTT_TABLE=rand_data
# Timestamp column name
MQTT_TIMESTAMP_COLUMN=now
# Value column name
MQTT_VALUE_COLUMN=bring [readings][][value]
# Column value type
MQTT_VALUE_COLUMN_TYPE=float

# --- Advanced Settings ---
# Whether to automatically run a local (or personalized) script at the end of the process
DEPLOY_LOCAL_SCRIPT=false
# Number of parallel queries
QUERY_POOL=3
# When data comes in write to database immidiately, as opposed to waiting for a full buffer
WRITE_IMMEDIATE=true
# If buffer is not full, how long to wait until pushing data through
THRESHOLD_TIME=60 seconds
# Buffer size to reach, at which point data is pushed through
THRESHOLD_VOLUME=10KB
# Whether to monitor the node or not
MONITOR_NODES=true
# Which node type to send monitoring information to
MONITOR_NODE=query
# Company node is associated with the monitor node
MONITOR_NODE_COMPANY=New Company

